{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to AlgoJam","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#codeblocks","title":"Codeblocks","text":"<p>Some <code>code</code> goes here</p>"},{"location":"#plain-codeblock","title":"Plain Codeblock","text":"<p>A plain codeblock</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n\n}\n</code></pre>"},{"location":"#code-for-a-specific-language","title":"Code for a specific language","text":"<p>Some more code with the <code>cpp</code> at the start:</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main()\n{\nios::sync_with_stdio(false);\ncin.tie(0);\n}\n</code></pre>"},{"location":"#with-a-title","title":"With a title","text":"basic_template.cpp<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main()\n{\nios::sync_with_stdio(false);\ncin.tie(0);\n}\n</code></pre>"},{"location":"#icons-and-emojis","title":"Icons and Emojis","text":""},{"location":"Page2/","title":"Templates and completions","text":"<p>Github repository link : <code>https://github.com/rajat-shahi/comp-pro-library/tree/main/template%20and%20completions</code></p>"},{"location":"Page2/#initial-template-for-comp-pro","title":"initial template for comp-pro","text":"basic-template.cpp<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#ifndef ONLINE_JUDGE\n#include\"/Users/rajat.shahi/Desktop/CPP/debug.h\"\n#endif\n#ifdef ONLINE_JUDGE\n#define debug(...) 42\n#endif\n#define endl '\\n'\nconst int mod = 1e9 + 7;\n// const int mod = (119 &lt;&lt; 23) + 1;\n#define rep(i,a,b) for(auto i=a;i&lt;=b;i++)\n#define per(i,a,b) for(auto i=a;i&gt;=b;i--)\nusing ll = long long;\nusing vll = vector&lt;long long&gt;;\nusing vi = vector&lt;int&gt;;\nusing pii = pair&lt;int, int&gt;;\nusing pll = pair&lt;ll, ll&gt;;\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define sz(x) (int) x.size()\n#define pb push_back\n#define ff first\n#define ss second\nconst int MAXN = 2e5 + 5;\nconst int inf = 1001001001;\nconst long long INF = 1001001001001001001ll;\nint main() {\ncin.tie(0)-&gt;sync_with_stdio(0);\ncin.exceptions(ios::badbit | ios::failbit);\nreturn 0;\n}\n</code></pre>"},{"location":"Page2/#debugging-template-for-competitive-programming","title":"debugging template for competitive programming","text":"<p>debug.h<pre><code>string to_string(string s)\n{\nreturn '\"' + s + '\"';\n}\nstring to_string(const char *s)\n{\nreturn to_string((string) s);\n}\nstring to_string(bool b)\n{\nreturn (b ? \"true\" : \"false\");\n}\ntemplate &lt;typename A, typename B&gt;\nstring to_string(pair&lt;A, B&gt; p)\n{\nreturn \"(\" + to_string(p.first) + \", \" + to_string(p.second) + \")\";\n}\ntemplate &lt;typename A&gt;\nstring to_string(A v)\n{\nbool first = true;\nstring res = \"{\";\nfor (const auto &amp;x : v)\n{\nif (!first)\n{\nres += \", \";\n}\nfirst = false;\nres += to_string(x);\n}\nres += \"}\";\nreturn res;\n}\nvoid debug_out()\n{\ncerr &lt;&lt; endl;\n}\ntemplate &lt;typename Head, typename... Tail&gt;\nvoid debug_out(Head H, Tail... T)\n{\ncerr &lt;&lt; \" \" &lt;&lt; to_string(H);\ndebug_out(T...);\n}\ntemplate&lt;typename T&gt;\nvoid debug_out(queue&lt;T&gt; q)\n{\ncerr &lt;&lt; \"{ \";\nwhile(not q.empty())\n{\ncerr &lt;&lt; q.front() &lt;&lt; \" , \";\nq.pop();\n}\ncerr &lt;&lt; \"}\";\n}\ntemplate&lt;typename T&gt;\nvoid debug_out(stack&lt;T&gt; st)\n{\ncerr &lt;&lt; \"{ \";\nwhile(not st.empty())\n{\ncerr &lt;&lt; st.top() &lt;&lt; \" , \";\nst.pop();\n}\ncerr &lt;&lt; \"}\";\n}\ntemplate&lt;typename T&gt;\nvoid debug_out(priority_queue&lt;T&gt; pq)\n{\ncerr &lt;&lt; \"{ \";\nwhile(not pq.empty())\n{\ncerr &lt;&lt; pq.front() &lt;&lt; \" , \";\npq.pop();\n}\ncerr &lt;&lt; \"}\";\n}\nvoid debug_out(string str)\n{\ncerr &lt;&lt; str &lt;&lt; endl;\n}\n#ifndef ONLINE_JUDGE\n#define debug(...) cerr &lt;&lt; \"Line \" &lt;&lt; __LINE__ &lt;&lt; \": \"&lt;&lt; \"[\" &lt;&lt; #__VA_ARGS__ &lt;&lt; \"]:\", debug_out(__VA_ARGS__)\n#else\n#define debug(...) 42\n#endif\n</code></pre> </p>"}]}